{"version":3,"sources":["../../source/lib/utils.js"],"names":["moment","require","types","_bitXOR","a","b","maxLength","length","padString","i","String","substr","response","generateRId","text","possible","charAt","Math","floor","random","_rotateBinary","bin","_getHashForChar","char","hash","charCode","charCodeAt","hashBin","parseInt","toString","charBin","nextHash","getHashOfPassword","str","curHash","curHashBin","charCountBin","saltBin","firstXOR","finalHashBin","finalHash","toUpperCase","slice","getExcelAlpha","colNum","remaining","aCharCode","columnName","mod","fromCharCode","getExcelCellRef","rowNum","getExcelRowCol","numeric","split","filter","el","alpha","row","col","reduce","index","arr","pow","getExcelTS","date","thisDt","utc","epoch","diff2","diff","ts","sortCellRefs","aAtt","bAtt","arrayIntersectSafe","Array","ai","bi","result","push","TypeError","getAllCellsInExcelRange","range","cells","cell1props","cell2props","getAllCellsInNumericRange","row1","col1","row2","col2","j","sort","boolToInt","bool","module","exports"],"mappings":"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","file":"utils.js","sourcesContent":["const moment = require('moment');\nlet types = require('./types/index.js');\n\nlet _bitXOR = (a, b) => {\n\tlet maxLength = a.length > b.length ? a.length : b.length;\n\n\tlet padString = '';\n\tfor (let i = 0; i < maxLength; i++) {\n\t\tpadString += '0';\n\t}\n\n\ta = String(padString + a).substr(-maxLength);\n\tb = String(padString + b).substr(-maxLength);\n\n\tlet response = '';\n\tfor (let i = 0; i < a.length; i++) {\n\t\tresponse += a[i] === b[i] ? 0 : 1;\n\t}\n\treturn response;\n};\n\nlet generateRId = () => {\n\tlet text = 'R';\n\tlet possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\tfor (let i = 0; i < 16; i++) {\n\t\ttext += possible.charAt(Math.floor(Math.random() * possible.length));\n\t}\n\treturn text;\n};\n\nlet _rotateBinary = (bin) => {\n\treturn bin.substr(1, bin.length - 1) + bin.substr(0, 1);\n};\n\nlet _getHashForChar = (char, hash) => {\n\thash = hash ? hash : '0000';\n\tlet charCode = char.charCodeAt(0);\n\tlet hashBin = parseInt(hash, 16).toString(2);\n\tlet charBin = parseInt(charCode, 10).toString(2);\n\thashBin = String('000000000000000' + hashBin).substr(-15);\n\tcharBin = String('000000000000000' + charBin).substr(-15);\n\tlet nextHash = _bitXOR(hashBin, charBin);\n\tnextHash = _rotateBinary(nextHash);\n\tnextHash = parseInt(nextHash, 2).toString(16);\n\n\treturn nextHash;\n};\n\n//  http://www.openoffice.org/sc/excelfileformat.pdf section 4.18.4\nlet getHashOfPassword = (str) => {\n\tlet curHash = '0000';\n\tfor (let i = str.length - 1; i >= 0; i--) {\n\t\tcurHash = _getHashForChar(str[i], curHash);\n\t}\n\tlet curHashBin = parseInt(curHash, 16).toString(2);\n\tlet charCountBin = parseInt(str.length, 10).toString(2);\n\tlet saltBin = parseInt('CE4B', 16).toString(2);\n\n\tlet firstXOR = _bitXOR(curHashBin, charCountBin);\n\tlet finalHashBin = _bitXOR(firstXOR, saltBin);\n\tlet finalHash = String('0000' + parseInt(finalHashBin, 2).toString(16).toUpperCase()).slice(-4);\n\n\treturn finalHash;\n};\n\n/**\n * Translates a column number into the Alpha equivalent used by Excel\n * @function getExcelAlpha\n * @param {Number} colNum Column number that is to be transalated\n * @returns {String} The Excel alpha representation of the column number\n * @example\n * // returns B\n * getExcelAlpha(2);\n */\nlet getExcelAlpha = (colNum) => {\n\tlet remaining = colNum;\n\tlet aCharCode = 65;\n\tlet columnName = '';\n\twhile (remaining > 0) {\n\t\tlet mod = (remaining - 1) % 26;\n\t\tcolumnName = String.fromCharCode(aCharCode + mod) + columnName;\n\t\tremaining = (remaining - 1 - mod) / 26;\n\t}\n\treturn columnName;\n};\n\n/**\n * Translates a column number into the Alpha equivalent used by Excel\n * @function getExcelAlpha\n * @param {Number} rowNum Row number that is to be transalated\n * @param {Number} colNum Column number that is to be transalated\n * @returns {String} The Excel alpha representation of the column number\n * @example\n * // returns B1\n * getExcelCellRef(1, 2);\n */\nlet getExcelCellRef = (rowNum, colNum) => {\n\tlet remaining = colNum;\n\tlet aCharCode = 65;\n\tlet columnName = '';\n\twhile (remaining > 0) {\n\t\tlet mod = (remaining - 1) % 26;\n\t\tcolumnName = String.fromCharCode(aCharCode + mod) + columnName;\n\t\tremaining = (remaining - 1 - mod) / 26;\n\t}\n\treturn columnName + rowNum;\n};\n\n/**\n * Translates a Excel cell represenation into row and column numerical equivalents\n * @function getExcelRowCol\n * @param {String} str Excel cell representation\n * @returns {Object} Object keyed with row and col\n * @example\n * // returns {row: 2, col: 3}\n * getExcelRowCol('C2')\n */\nlet getExcelRowCol = (str) => {\n\tlet numeric = str.split(/\\D/).filter(function (el) {\n\t\treturn el !== '';\n\t})[0];\n\tlet alpha = str.split(/\\d/).filter(function (el) {\n\t\treturn el !== '';\n\t})[0];\n\tlet row = parseInt(numeric, 10);\n\tlet col = alpha.toUpperCase().split('').reduce(function (a, b, index, arr) {\n\t\treturn a + (b.charCodeAt(0) - 64) * Math.pow(26, arr.length - index - 1);\n\t}, 0);\n\treturn { row: row, col: col };\n};\n\n/**\n * Translates a date into Excel timestamp\n * @function getExcelTS\n * @param {Date} date Date to translate\n * @returns {Number} Excel timestamp\n * @example\n * // returns 29810.958333333332\n * getExcelTS(new Date('08/13/1981'));\n */\nlet getExcelTS = (date) => {\n\tlet thisDt = moment.utc(date);\n\tlet epoch = moment.utc([1899, 11, 31]);\n\tlet diff2 = thisDt.diff(epoch);\n\tlet ts = diff2 / (1000 * 60 * 60 * 24);\n\treturn ts;\n};\n\nlet sortCellRefs = (a, b) => {\n\tlet aAtt = getExcelRowCol(a);\n\tlet bAtt = getExcelRowCol(b);\n\tif (aAtt.col === bAtt.col) {\n\t\treturn aAtt.row - bAtt.row;\n\t} else {\n\t\treturn aAtt.col - bAtt.col;\n\t}\n};\n\nlet arrayIntersectSafe = (a, b) => {\n\n\tif (a instanceof Array && b instanceof Array) {\n\t\tvar ai = 0,\n\t\t\tbi = 0;\n\t\tvar result = new Array();\n\n\t\twhile (ai < a.length && bi < b.length) {\n\t\t\tif (a[ai] < b[bi]) {\n\t\t\t\tai++;\n\t\t\t} else if (a[ai] > b[bi]) {\n\t\t\t\tbi++;\n\t\t\t} else {\n\t\t\t\tresult.push(a[ai]);\n\t\t\t\tai++;\n\t\t\t\tbi++;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t} else {\n\t\tthrow new TypeError('Both variables sent to arrayIntersectSafe must be arrays');\n\t}\n};\n\nlet getAllCellsInExcelRange = (range) => {\n\tvar cells = range.split(':');\n\tvar cell1props = getExcelRowCol(cells[0]);\n\tvar cell2props = getExcelRowCol(cells[1]);\n\treturn getAllCellsInNumericRange(cell1props.row, cell1props.col, cell2props.row, cell2props.col);\n};\n\nlet getAllCellsInNumericRange = (row1, col1, row2, col2) => {\n\tvar response = [];\n\trow2 = row2 ? row2 : row1;\n\tcol2 = col2 ? col2 : col1;\n\tfor (var i = row1; i <= row2; i++) {\n\t\tfor (var j = col1; j <= col2; j++) {\n\t\t\tresponse.push(getExcelAlpha(j) + i);\n\t\t}\n\t}\n\treturn response.sort(sortCellRefs);\n};\n\nlet boolToInt = (bool) => {\n\tif (bool === true) {\n\t\treturn 1;\n\t}\n\tif (bool === false) {\n\t\treturn 0;\n\t}\n\tif (parseInt(bool) === 1) {\n\t\treturn 1;\n\t}\n\tif (parseInt(bool) === 0) {\n\t\treturn 0;\n\t}\n\tthrow new TypeError('Value sent to boolToInt must be true, false, 1 or 0');\n};\n\n/*\n * Helper Functions\n */\n\nmodule.exports = {\n\tgenerateRId,\n\tgetHashOfPassword,\n\tgetExcelAlpha,\n\tgetExcelCellRef,\n\tgetExcelRowCol,\n\tgetExcelTS,\n\tsortCellRefs,\n\tarrayIntersectSafe,\n\tgetAllCellsInExcelRange,\n\tgetAllCellsInNumericRange,\n\tboolToInt\n};\n"]}